<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-25 at 15:44:45.
 */
abstract class Avz_DataStore_AbstractTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Avz_DataStore_Abstract
     */
    protected $object;

    protected $itemsData  =    array(
                                    1 => array( 'id' => 1,'anotherId' => 10, 'fString' => 'val1', 'fInt' => 100),
                                    2 => array( 'id' => 2,'anotherId' => 20, 'fString' => 'val2', 'fInt' => 200),
                                    3 => array( 'id' => 3,'anotherId' => 30, 'fString' => 'val3', 'fInt' => 300),  
                                    4 => array( 'id' => 4,'anotherId' => 40, 'fString' => 'val4', 'fInt' => 400)          
                                );
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method init $this->object
     */
    protected function _initObject( $options= array()) {
        $this->object = new $this->testedClass($options);        
    }
 
/**************************** Identifier ************************/
    
    public function testSetIdentifier() {
        $this->_initObject();
        $this->object->setIdentifier('sameId');
        $this->assertEquals('sameId', $this->object->getIdentifier()
        );
    }    
    
    public function testSetIdentifierByConstruct() {
        $options = array( 
                Avz_DataStore_Abstract::KEY_METADATA => array(
                    Avz_DataStore_Abstract::KEY_IDENTIFIER => 'anotherId'
                )
            );
        $this->_initObject($options);
        $this->assertEquals(
                'anotherId', 
                $this->object->getIdentifier()
        );
    }    
    
    public function testSetIdentifierByDefault() {
        $this->_initObject();        
        $this->assertEquals(
                Avz_DataStore_Abstract::DEFAULT_IDENTIFIER, 
                $this->object->getIdentifier() //'id'
        );
    }    
/*^^^^^^^^^^^^^^^^^^^^^^^^^^^ Metadata ^^^^^^^^^^^^^^^^^^^^^^^^*/       
    
    public function testSetGetMetadata() {
        $this->_initObject();                
        $this->object->setMetadata( array('keyMetadata1' => 'sameMetadata1','keyMetadata2' => 'sameMetadata2'));
        $this->assertEquals(
                array('keyMetadata1' => 'sameMetadata1','keyMetadata2' => 'sameMetadata2'), 
                $this->object->getMetadata()
        );        

    }

    public function testSetGetMetadataByKey() {
        $this->_initObject();                
        $this->object->setMetadata('sameMetadata1','keyMetadata1');
        $this->assertEquals('sameMetadata1', $this->object->getMetadata('keyMetadata1'));        
    }       
    
    public function testSetMetadataByConstruct() {  
        $options = array( 
                Avz_DataStore_Abstract::KEY_METADATA => array(
                    'keyMetadata1' => 'sameMetadata1',
                    'keyMetadata2' => 'sameMetadata2'
                )
            );
        $this->_initObject($options);     
        $this->assertEquals('sameMetadata1', $this->object->getMetadata('keyMetadata1')
        );
    }  
    
    public function testRemoveAllMetadata() {
        $options = array( 
                Avz_DataStore_Abstract::KEY_METADATA => array(
                    'keyMetadata1' => 'sameMetadata1',
                    'keyMetadata2' => 'sameMetadata2'
                )
            );
        $this->_initObject($options);  
        $this->object->removeMetadata();
        $this->assertEquals(array() , $this->object->getMetadata()
        );
    }  
    
    
    public function testRemoveMetadataByKey() {
        $options = array( 
                Avz_DataStore_Abstract::KEY_METADATA => array(
                    'keyMetadata1' => 'sameMetadata1',
                    'keyMetadata2' => 'sameMetadata2'
                )
            );
        $this->_initObject($options);  
        $this->object->removeMetadata('keyMetadata1');
        $this->assertEquals(
                array(
                    'keyMetadata2' => 'sameMetadata2'
                ) , 
                $this->object->getMetadata()
        );
    }      
    
// *************************** Item **************************************************    
    
    public function testSetGetItem_defaultId()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        $this->object->setItem($this->itemsData[2]);
        $this->assertEquals(
                $this->itemsData[2] , 
                $this->object->getItem(2));   
    }     
    
    public function testSetGetItem_anotherId()
    {
        $this->_initObject();         
        $this->object->setIdentifier('anotherId');
        $this->object->setItem($this->itemsData[2]);
        $this->assertEquals(
                $this->itemsData[2] ,
                $this->object->getItem(20));
    } 
    
    public function testSetItem_withoutId()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        $this->object->setItem($this->itemsData[1]);
        $itemWithouId = $this->itemsData[2];
        $this->object->setItem($itemWithouId);        
        unset($itemWithouId['id']);
        $this->object->setItem($itemWithouId);
        $this->object->setItem($itemWithouId);        
 
        $this->assertEquals(
                4,
                $this->object->count()
        );   
    }     
    
    public function testHasItem_Exist()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        $this->object->setItem($this->itemsData[2]);
        $this->assertTrue($this->object->hasItem(2));
        $this->assertFalse($this->object->hasItem(30));        
    }      
     
    public function testRemoveItemt_One()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        $this->object->setItem($this->itemsData[1]);  
        $this->object->setItem($this->itemsData[2]);         
        $this->object->removeItem(2);
        $this->assertEquals(
                1,
                $this->object->count()
        );         
    } 
/**   
    public function testRemoveItemts()
    {
        
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        $this->object->setItem($this->itemsData[1]);  
        $this->object->setItem($this->itemsData[2]);     
        $this->object->setItem($this->itemsData[3]); 
        $this->object->setItem($this->itemsData[4]); 

        
         $this->assertEquals(
                4,
                $this->object->count()
        );            
        $this->object->removeItems();

        $this->assertEquals(
                0,
                $this->object->count()
        );         
    }     
*/ 
//************************** Iterator ************************ 
    
    public function testIteratorInterfaceStepToStep()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        foreach ($this->itemsData as $value) {
             $this->object->setItem($value);
        }
        $this->assertEquals(
                4,
                $this->object->count()
        );
        foreach ($this->itemsData as $key => $value) {
            $this->assertEquals( $value, $this->object->getItem($key) );
        }
    
        $i = 0;
        foreach ($this->object as $key => $value) {
            $i = $i +1;
            $this->assertEquals(
                    $key,
                    $i
            );            
            $this->assertEquals( $value, $this->itemsData[$i] );
        }
        $this->assertEquals( 4, $i );        
        
    }     
    
    
    public function testIteratorInterfaceEditedData()
    {
        $this->_initObject();         
        //$this->object->setIdentifier('id');
        foreach ($this->itemsData as $value) {
             $this->object->setItem($value);
        }
        $this->assertEquals(
                4,
                $this->object->count()
        );
        foreach ($this->itemsData as $key => $value) {
            $this->assertEquals(
                    $value,
                    $this->object->getItem($key)
            );
        }
        
        $this->object->removeItem(2);
        $newItem = $this->itemsData[2];
        unset($newItem['id']);
        $this->object->setItem($newItem); 

        $i = 0;
        foreach ($this->object as $key => $value) {
            $i = $i +1;
            $this->assertEquals(
                    $value['fString'],
                    $this->itemsData[$value['anotherId']/10]['fString']
            );
        }        
        $this->assertEquals( 4, $i );          
    }         
    
//************************* Countable **********************
    
    public function testShouldImplementCountable()
    {
        $this->assertTrue(is_a($this->testedClass, 'Countable', true));
    }
    
    public function testCountNull()
    {
        $this->_initObject();         
        $this->assertEquals(
                0,
                $this->object->count()
        ); 
    }
    
    public function testCount2()
    {
        $this->_initObject();  
        $this->object->setItem($this->itemsData[1]);
        $this->object->setItem($this->itemsData[2]);
        $this->assertEquals(
                2,
                $this->object->count()
        ); 
    }    
    
    /**
    public function testAddItemShouldAcceptStdObject()
    {
        $this->_initObject('optionsDataStandart');         
        $item = array( 'id' => 1000, 'fString' => 'val10', 'fInt' => 100);
        $obj = (object) $item;
        $this->object->setIdentifier('id');
        $this->object->addItem($obj);
        $this->assertEquals(1, count($this->object));
        $this->assertSame($item, $this->object->getItem(1000));
    }   
     * /
     */
}
